/* example.vala generated by valac, the Vala compiler, do not modify */


#ifndef __EXAMPLE_VALA__
#define __EXAMPLE_VALA__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define MIDGARD_TYPE_EXECUTABLE (midgard_executable_get_type ())
#define MIDGARD_EXECUTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_EXECUTABLE, MidgardExecutable))
#define MIDGARD_IS_EXECUTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_EXECUTABLE))
#define MIDGARD_EXECUTABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_EXECUTABLE, MidgardExecutableIface))

typedef struct _MidgardExecutable MidgardExecutable;
typedef struct _MidgardExecutableIface MidgardExecutableIface;

#define MIDGARD_TYPE_NAMESPACE_MANAGER (midgard_namespace_manager_get_type ())
#define MIDGARD_NAMESPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_NAMESPACE_MANAGER, MidgardNamespaceManager))
#define MIDGARD_IS_NAMESPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_NAMESPACE_MANAGER))
#define MIDGARD_NAMESPACE_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_NAMESPACE_MANAGER, MidgardNamespaceManagerIface))

typedef struct _MidgardNamespaceManager MidgardNamespaceManager;
typedef struct _MidgardNamespaceManagerIface MidgardNamespaceManagerIface;

#define MIDGARD_TYPE_PROFILER (midgard_profiler_get_type ())
#define MIDGARD_PROFILER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_PROFILER, MidgardProfiler))
#define MIDGARD_IS_PROFILER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_PROFILER))
#define MIDGARD_PROFILER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_PROFILER, MidgardProfilerIface))

typedef struct _MidgardProfiler MidgardProfiler;
typedef struct _MidgardProfilerIface MidgardProfilerIface;

#define MIDGARD_TYPE_QUERY_CONSTRAINT_SIMPLE (midgard_query_constraint_simple_get_type ())
#define MIDGARD_QUERY_CONSTRAINT_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_SIMPLE, MidgardQueryConstraintSimple))
#define MIDGARD_IS_QUERY_CONSTRAINT_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_SIMPLE))
#define MIDGARD_QUERY_CONSTRAINT_SIMPLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_SIMPLE, MidgardQueryConstraintSimpleIface))

typedef struct _MidgardQueryConstraintSimple MidgardQueryConstraintSimple;
typedef struct _MidgardQueryConstraintSimpleIface MidgardQueryConstraintSimpleIface;

#define MIDGARD_TYPE_QUERY_STORAGE (midgard_query_storage_get_type ())
#define MIDGARD_QUERY_STORAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_STORAGE, MidgardQueryStorage))
#define MIDGARD_IS_QUERY_STORAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_STORAGE))
#define MIDGARD_QUERY_STORAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_STORAGE, MidgardQueryStorageIface))

typedef struct _MidgardQueryStorage MidgardQueryStorage;
typedef struct _MidgardQueryStorageIface MidgardQueryStorageIface;

#define MIDGARD_TYPE_QUERY_CONSTRAINT (midgard_query_constraint_get_type ())
#define MIDGARD_QUERY_CONSTRAINT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT, MidgardQueryConstraint))
#define MIDGARD_IS_QUERY_CONSTRAINT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT))
#define MIDGARD_QUERY_CONSTRAINT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT, MidgardQueryConstraintIface))

typedef struct _MidgardQueryConstraint MidgardQueryConstraint;
typedef struct _MidgardQueryConstraintIface MidgardQueryConstraintIface;

#define MIDGARD_TYPE_QUERY_PROPERTY (midgard_query_property_get_type ())
#define MIDGARD_QUERY_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_PROPERTY, MidgardQueryProperty))
#define MIDGARD_QUERY_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_QUERY_PROPERTY, MidgardQueryPropertyClass))
#define MIDGARD_IS_QUERY_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_PROPERTY))
#define MIDGARD_IS_QUERY_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_QUERY_PROPERTY))
#define MIDGARD_QUERY_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_QUERY_PROPERTY, MidgardQueryPropertyClass))

typedef struct _MidgardQueryProperty MidgardQueryProperty;
typedef struct _MidgardQueryPropertyClass MidgardQueryPropertyClass;

#define MIDGARD_TYPE_QUERY_VALUE_HOLDER (midgard_query_value_holder_get_type ())
#define MIDGARD_QUERY_VALUE_HOLDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_VALUE_HOLDER, MidgardQueryValueHolder))
#define MIDGARD_IS_QUERY_VALUE_HOLDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_VALUE_HOLDER))
#define MIDGARD_QUERY_VALUE_HOLDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_VALUE_HOLDER, MidgardQueryValueHolderIface))

typedef struct _MidgardQueryValueHolder MidgardQueryValueHolder;
typedef struct _MidgardQueryValueHolderIface MidgardQueryValueHolderIface;

#define MIDGARD_TYPE_QUERY_CONSTRAINT_GROUP (midgard_query_constraint_group_get_type ())
#define MIDGARD_QUERY_CONSTRAINT_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_GROUP, MidgardQueryConstraintGroup))
#define MIDGARD_IS_QUERY_CONSTRAINT_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_GROUP))
#define MIDGARD_QUERY_CONSTRAINT_GROUP_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_CONSTRAINT_GROUP, MidgardQueryConstraintGroupIface))

typedef struct _MidgardQueryConstraintGroup MidgardQueryConstraintGroup;
typedef struct _MidgardQueryConstraintGroupIface MidgardQueryConstraintGroupIface;

#define MIDGARD_TYPE_QUERY_VALUE (midgard_query_value_get_type ())
#define MIDGARD_QUERY_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_VALUE, MidgardQueryValue))
#define MIDGARD_QUERY_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_QUERY_VALUE, MidgardQueryValueClass))
#define MIDGARD_IS_QUERY_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_VALUE))
#define MIDGARD_IS_QUERY_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_QUERY_VALUE))
#define MIDGARD_QUERY_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_QUERY_VALUE, MidgardQueryValueClass))

typedef struct _MidgardQueryValue MidgardQueryValue;
typedef struct _MidgardQueryValueClass MidgardQueryValueClass;
typedef struct _MidgardQueryValuePrivate MidgardQueryValuePrivate;
typedef struct _MidgardQueryPropertyPrivate MidgardQueryPropertyPrivate;

#define MIDGARD_TYPE_QUERY_EXECUTOR (midgard_query_executor_get_type ())
#define MIDGARD_QUERY_EXECUTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_EXECUTOR, MidgardQueryExecutor))
#define MIDGARD_IS_QUERY_EXECUTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_EXECUTOR))
#define MIDGARD_QUERY_EXECUTOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_EXECUTOR, MidgardQueryExecutorIface))

typedef struct _MidgardQueryExecutor MidgardQueryExecutor;
typedef struct _MidgardQueryExecutorIface MidgardQueryExecutorIface;

#define MIDGARD_TYPE_QUERY_SELECT (midgard_query_select_get_type ())
#define MIDGARD_QUERY_SELECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_SELECT, MidgardQuerySelect))
#define MIDGARD_IS_QUERY_SELECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_SELECT))
#define MIDGARD_QUERY_SELECT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_SELECT, MidgardQuerySelectIface))

typedef struct _MidgardQuerySelect MidgardQuerySelect;
typedef struct _MidgardQuerySelectIface MidgardQuerySelectIface;

#define MIDGARD_TYPE_STORABLE (midgard_storable_get_type ())
#define MIDGARD_STORABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORABLE, MidgardStorable))
#define MIDGARD_IS_STORABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORABLE))
#define MIDGARD_STORABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORABLE, MidgardStorableIface))

typedef struct _MidgardStorable MidgardStorable;
typedef struct _MidgardStorableIface MidgardStorableIface;

#define MIDGARD_TYPE_QUERY_DATA (midgard_query_data_get_type ())
#define MIDGARD_QUERY_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_DATA, MidgardQueryData))
#define MIDGARD_IS_QUERY_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_DATA))
#define MIDGARD_QUERY_DATA_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_DATA, MidgardQueryDataIface))

typedef struct _MidgardQueryData MidgardQueryData;
typedef struct _MidgardQueryDataIface MidgardQueryDataIface;

#define MIDGARD_TYPE_MODEL_REFLECTOR (midgard_model_reflector_get_type ())
#define MIDGARD_MODEL_REFLECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_MODEL_REFLECTOR, MidgardModelReflector))
#define MIDGARD_IS_MODEL_REFLECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_MODEL_REFLECTOR))
#define MIDGARD_MODEL_REFLECTOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_MODEL_REFLECTOR, MidgardModelReflectorIface))

typedef struct _MidgardModelReflector MidgardModelReflector;
typedef struct _MidgardModelReflectorIface MidgardModelReflectorIface;

#define MIDGARD_TYPE_MODEL (midgard_model_get_type ())
#define MIDGARD_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_MODEL, MidgardModel))
#define MIDGARD_IS_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_MODEL))
#define MIDGARD_MODEL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_MODEL, MidgardModelIface))

typedef struct _MidgardModel MidgardModel;
typedef struct _MidgardModelIface MidgardModelIface;

#define MIDGARD_TYPE_MODEL_PROPERTY_REFLECTOR (midgard_model_property_reflector_get_type ())
#define MIDGARD_MODEL_PROPERTY_REFLECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_MODEL_PROPERTY_REFLECTOR, MidgardModelPropertyReflector))
#define MIDGARD_IS_MODEL_PROPERTY_REFLECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_MODEL_PROPERTY_REFLECTOR))
#define MIDGARD_MODEL_PROPERTY_REFLECTOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_MODEL_PROPERTY_REFLECTOR, MidgardModelPropertyReflectorIface))

typedef struct _MidgardModelPropertyReflector MidgardModelPropertyReflector;
typedef struct _MidgardModelPropertyReflectorIface MidgardModelPropertyReflectorIface;

#define MIDGARD_TYPE_MODEL_PROPERTY (midgard_model_property_get_type ())
#define MIDGARD_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_MODEL_PROPERTY, MidgardModelProperty))
#define MIDGARD_IS_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_MODEL_PROPERTY))
#define MIDGARD_MODEL_PROPERTY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_MODEL_PROPERTY, MidgardModelPropertyIface))

typedef struct _MidgardModelProperty MidgardModelProperty;
typedef struct _MidgardModelPropertyIface MidgardModelPropertyIface;

#define MIDGARD_TYPE_SCHEMA_MODEL (midgard_schema_model_get_type ())
#define MIDGARD_SCHEMA_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SCHEMA_MODEL, MidgardSchemaModel))
#define MIDGARD_SCHEMA_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SCHEMA_MODEL, MidgardSchemaModelClass))
#define MIDGARD_IS_SCHEMA_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SCHEMA_MODEL))
#define MIDGARD_IS_SCHEMA_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SCHEMA_MODEL))
#define MIDGARD_SCHEMA_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SCHEMA_MODEL, MidgardSchemaModelClass))

typedef struct _MidgardSchemaModel MidgardSchemaModel;
typedef struct _MidgardSchemaModelClass MidgardSchemaModelClass;
typedef struct _MidgardSchemaModelPrivate MidgardSchemaModelPrivate;

#define MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY (midgard_schema_model_property_get_type ())
#define MIDGARD_SCHEMA_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY, MidgardSchemaModelProperty))
#define MIDGARD_SCHEMA_MODEL_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY, MidgardSchemaModelPropertyClass))
#define MIDGARD_IS_SCHEMA_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY))
#define MIDGARD_IS_SCHEMA_MODEL_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY))
#define MIDGARD_SCHEMA_MODEL_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SCHEMA_MODEL_PROPERTY, MidgardSchemaModelPropertyClass))

typedef struct _MidgardSchemaModelProperty MidgardSchemaModelProperty;
typedef struct _MidgardSchemaModelPropertyClass MidgardSchemaModelPropertyClass;
typedef struct _MidgardSchemaModelPropertyPrivate MidgardSchemaModelPropertyPrivate;

#define MIDGARD_TYPE_SCHEMA_BUILDER (midgard_schema_builder_get_type ())
#define MIDGARD_SCHEMA_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SCHEMA_BUILDER, MidgardSchemaBuilder))
#define MIDGARD_SCHEMA_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SCHEMA_BUILDER, MidgardSchemaBuilderClass))
#define MIDGARD_IS_SCHEMA_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SCHEMA_BUILDER))
#define MIDGARD_IS_SCHEMA_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SCHEMA_BUILDER))
#define MIDGARD_SCHEMA_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SCHEMA_BUILDER, MidgardSchemaBuilderClass))

typedef struct _MidgardSchemaBuilder MidgardSchemaBuilder;
typedef struct _MidgardSchemaBuilderClass MidgardSchemaBuilderClass;
typedef struct _MidgardSchemaBuilderPrivate MidgardSchemaBuilderPrivate;

#define MIDGARD_TYPE_STORAGE_MANAGER (midgard_storage_manager_get_type ())
#define MIDGARD_STORAGE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_MANAGER, MidgardStorageManager))
#define MIDGARD_IS_STORAGE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_MANAGER))
#define MIDGARD_STORAGE_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_MANAGER, MidgardStorageManagerIface))

typedef struct _MidgardStorageManager MidgardStorageManager;
typedef struct _MidgardStorageManagerIface MidgardStorageManagerIface;

#define MIDGARD_TYPE_CONFIG (midgard_config_get_type ())
#define MIDGARD_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_CONFIG, MidgardConfig))
#define MIDGARD_IS_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_CONFIG))
#define MIDGARD_CONFIG_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_CONFIG, MidgardConfigIface))

typedef struct _MidgardConfig MidgardConfig;
typedef struct _MidgardConfigIface MidgardConfigIface;

#define MIDGARD_TYPE_STORAGE_CONTENT_MANAGER (midgard_storage_content_manager_get_type ())
#define MIDGARD_STORAGE_CONTENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_CONTENT_MANAGER, MidgardStorageContentManager))
#define MIDGARD_IS_STORAGE_CONTENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_CONTENT_MANAGER))
#define MIDGARD_STORAGE_CONTENT_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_CONTENT_MANAGER, MidgardStorageContentManagerIface))

typedef struct _MidgardStorageContentManager MidgardStorageContentManager;
typedef struct _MidgardStorageContentManagerIface MidgardStorageContentManagerIface;

#define MIDGARD_TYPE_QUERY_MANAGER (midgard_query_manager_get_type ())
#define MIDGARD_QUERY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_QUERY_MANAGER, MidgardQueryManager))
#define MIDGARD_IS_QUERY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_QUERY_MANAGER))
#define MIDGARD_QUERY_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_QUERY_MANAGER, MidgardQueryManagerIface))

typedef struct _MidgardQueryManager MidgardQueryManager;
typedef struct _MidgardQueryManagerIface MidgardQueryManagerIface;

#define MIDGARD_TYPE_STORAGE_EXECUTOR (midgard_storage_executor_get_type ())
#define MIDGARD_STORAGE_EXECUTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_EXECUTOR, MidgardStorageExecutor))
#define MIDGARD_IS_STORAGE_EXECUTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_EXECUTOR))
#define MIDGARD_STORAGE_EXECUTOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_EXECUTOR, MidgardStorageExecutorIface))

typedef struct _MidgardStorageExecutor MidgardStorageExecutor;
typedef struct _MidgardStorageExecutorIface MidgardStorageExecutorIface;

#define MIDGARD_TYPE_STORAGE_MODEL_MANAGER (midgard_storage_model_manager_get_type ())
#define MIDGARD_STORAGE_MODEL_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_MODEL_MANAGER, MidgardStorageModelManager))
#define MIDGARD_IS_STORAGE_MODEL_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_MODEL_MANAGER))
#define MIDGARD_STORAGE_MODEL_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_MODEL_MANAGER, MidgardStorageModelManagerIface))

typedef struct _MidgardStorageModelManager MidgardStorageModelManager;
typedef struct _MidgardStorageModelManagerIface MidgardStorageModelManagerIface;

#define MIDGARD_TYPE_STORAGE_MODEL (midgard_storage_model_get_type ())
#define MIDGARD_STORAGE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_MODEL, MidgardStorageModel))
#define MIDGARD_IS_STORAGE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_MODEL))
#define MIDGARD_STORAGE_MODEL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_MODEL, MidgardStorageModelIface))

typedef struct _MidgardStorageModel MidgardStorageModel;
typedef struct _MidgardStorageModelIface MidgardStorageModelIface;

#define MIDGARD_TYPE_TRANSACTION (midgard_transaction_get_type ())
#define MIDGARD_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_TRANSACTION, MidgardTransaction))
#define MIDGARD_IS_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_TRANSACTION))
#define MIDGARD_TRANSACTION_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_TRANSACTION, MidgardTransactionIface))

typedef struct _MidgardTransaction MidgardTransaction;
typedef struct _MidgardTransactionIface MidgardTransactionIface;

#define MIDGARD_TYPE_STORAGE_WORKSPACE_MANAGER (midgard_storage_workspace_manager_get_type ())
#define MIDGARD_STORAGE_WORKSPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_WORKSPACE_MANAGER, MidgardStorageWorkspaceManager))
#define MIDGARD_IS_STORAGE_WORKSPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_WORKSPACE_MANAGER))
#define MIDGARD_STORAGE_WORKSPACE_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_WORKSPACE_MANAGER, MidgardStorageWorkspaceManagerIface))

typedef struct _MidgardStorageWorkspaceManager MidgardStorageWorkspaceManager;
typedef struct _MidgardStorageWorkspaceManagerIface MidgardStorageWorkspaceManagerIface;

#define MIDGARD_TYPE_WORKSPACE_STORAGE (midgard_workspace_storage_get_type ())
#define MIDGARD_WORKSPACE_STORAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_WORKSPACE_STORAGE, MidgardWorkspaceStorage))
#define MIDGARD_IS_WORKSPACE_STORAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_WORKSPACE_STORAGE))
#define MIDGARD_WORKSPACE_STORAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_WORKSPACE_STORAGE, MidgardWorkspaceStorageIface))

typedef struct _MidgardWorkspaceStorage MidgardWorkspaceStorage;
typedef struct _MidgardWorkspaceStorageIface MidgardWorkspaceStorageIface;

#define MIDGARD_TYPE_TIMESTAMP (midgard_timestamp_get_type ())
#define MIDGARD_TIMESTAMP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_TIMESTAMP, MidgardTimestamp))
#define MIDGARD_TIMESTAMP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_TIMESTAMP, MidgardTimestampClass))
#define MIDGARD_IS_TIMESTAMP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_TIMESTAMP))
#define MIDGARD_IS_TIMESTAMP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_TIMESTAMP))
#define MIDGARD_TIMESTAMP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_TIMESTAMP, MidgardTimestampClass))

typedef struct _MidgardTimestamp MidgardTimestamp;
typedef struct _MidgardTimestampClass MidgardTimestampClass;
typedef struct _MidgardTimestampPrivate MidgardTimestampPrivate;

#define MIDGARD_TYPE_METADATA (midgard_metadata_get_type ())
#define MIDGARD_METADATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_METADATA, MidgardMetadata))
#define MIDGARD_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_METADATA, MidgardMetadataClass))
#define MIDGARD_IS_METADATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_METADATA))
#define MIDGARD_IS_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_METADATA))
#define MIDGARD_METADATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_METADATA, MidgardMetadataClass))

typedef struct _MidgardMetadata MidgardMetadata;
typedef struct _MidgardMetadataClass MidgardMetadataClass;
typedef struct _MidgardMetadataPrivate MidgardMetadataPrivate;

#define MIDGARD_TYPE_SCHEMA_OBJECT (midgard_schema_object_get_type ())
#define MIDGARD_SCHEMA_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SCHEMA_OBJECT, MidgardSchemaObject))
#define MIDGARD_SCHEMA_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SCHEMA_OBJECT, MidgardSchemaObjectClass))
#define MIDGARD_IS_SCHEMA_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SCHEMA_OBJECT))
#define MIDGARD_IS_SCHEMA_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SCHEMA_OBJECT))
#define MIDGARD_SCHEMA_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SCHEMA_OBJECT, MidgardSchemaObjectClass))

typedef struct _MidgardSchemaObject MidgardSchemaObject;
typedef struct _MidgardSchemaObjectClass MidgardSchemaObjectClass;
typedef struct _MidgardSchemaObjectPrivate MidgardSchemaObjectPrivate;

#define MIDGARD_TYPE_DB_OBJECT (midgard_db_object_get_type ())
#define MIDGARD_DB_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_DB_OBJECT, MidgardDBObject))
#define MIDGARD_DB_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_DB_OBJECT, MidgardDBObjectClass))
#define MIDGARD_IS_DB_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_DB_OBJECT))
#define MIDGARD_IS_DB_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_DB_OBJECT))
#define MIDGARD_DB_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_DB_OBJECT, MidgardDBObjectClass))

typedef struct _MidgardDBObject MidgardDBObject;
typedef struct _MidgardDBObjectClass MidgardDBObjectClass;
typedef struct _MidgardDBObjectPrivate MidgardDBObjectPrivate;

#define MIDGARD_TYPE_SQL_STORAGE_MANAGER (midgard_sql_storage_manager_get_type ())
#define MIDGARD_SQL_STORAGE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SQL_STORAGE_MANAGER, MidgardSQLStorageManager))
#define MIDGARD_SQL_STORAGE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SQL_STORAGE_MANAGER, MidgardSQLStorageManagerClass))
#define MIDGARD_IS_SQL_STORAGE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SQL_STORAGE_MANAGER))
#define MIDGARD_IS_SQL_STORAGE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SQL_STORAGE_MANAGER))
#define MIDGARD_SQL_STORAGE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SQL_STORAGE_MANAGER, MidgardSQLStorageManagerClass))

typedef struct _MidgardSQLStorageManager MidgardSQLStorageManager;
typedef struct _MidgardSQLStorageManagerClass MidgardSQLStorageManagerClass;
typedef struct _MidgardSQLStorageManagerPrivate MidgardSQLStorageManagerPrivate;

#define MIDGARD_TYPE_STORAGE_MANAGER_POOL (midgard_storage_manager_pool_get_type ())
#define MIDGARD_STORAGE_MANAGER_POOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_MANAGER_POOL, MidgardStorageManagerPool))
#define MIDGARD_IS_STORAGE_MANAGER_POOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_MANAGER_POOL))
#define MIDGARD_STORAGE_MANAGER_POOL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_MANAGER_POOL, MidgardStorageManagerPoolIface))

typedef struct _MidgardStorageManagerPool MidgardStorageManagerPool;
typedef struct _MidgardStorageManagerPoolIface MidgardStorageManagerPoolIface;

#define MIDGARD_TYPE_STORAGE_MODEL_PROPERTY (midgard_storage_model_property_get_type ())
#define MIDGARD_STORAGE_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_STORAGE_MODEL_PROPERTY, MidgardStorageModelProperty))
#define MIDGARD_IS_STORAGE_MODEL_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_STORAGE_MODEL_PROPERTY))
#define MIDGARD_STORAGE_MODEL_PROPERTY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDGARD_TYPE_STORAGE_MODEL_PROPERTY, MidgardStorageModelPropertyIface))

typedef struct _MidgardStorageModelProperty MidgardStorageModelProperty;
typedef struct _MidgardStorageModelPropertyIface MidgardStorageModelPropertyIface;

#define MIDGARD_TYPE_WORKSPACE_CONTEXT (midgard_workspace_context_get_type ())
#define MIDGARD_WORKSPACE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_WORKSPACE_CONTEXT, MidgardWorkspaceContext))
#define MIDGARD_WORKSPACE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_WORKSPACE_CONTEXT, MidgardWorkspaceContextClass))
#define MIDGARD_IS_WORKSPACE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_WORKSPACE_CONTEXT))
#define MIDGARD_IS_WORKSPACE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_WORKSPACE_CONTEXT))
#define MIDGARD_WORKSPACE_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_WORKSPACE_CONTEXT, MidgardWorkspaceContextClass))

typedef struct _MidgardWorkspaceContext MidgardWorkspaceContext;
typedef struct _MidgardWorkspaceContextClass MidgardWorkspaceContextClass;
typedef struct _MidgardWorkspaceContextPrivate MidgardWorkspaceContextPrivate;

#define MIDGARD_TYPE_WORKSPACE (midgard_workspace_get_type ())
#define MIDGARD_WORKSPACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_WORKSPACE, MidgardWorkspace))
#define MIDGARD_WORKSPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_WORKSPACE, MidgardWorkspaceClass))
#define MIDGARD_IS_WORKSPACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_WORKSPACE))
#define MIDGARD_IS_WORKSPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_WORKSPACE))
#define MIDGARD_WORKSPACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_WORKSPACE, MidgardWorkspaceClass))

typedef struct _MidgardWorkspace MidgardWorkspace;
typedef struct _MidgardWorkspaceClass MidgardWorkspaceClass;
typedef struct _MidgardWorkspacePrivate MidgardWorkspacePrivate;

#define MIDGARD_TYPE_SQL_WORKSPACE_MANAGER (midgard_sql_workspace_manager_get_type ())
#define MIDGARD_SQL_WORKSPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDGARD_TYPE_SQL_WORKSPACE_MANAGER, MidgardSQLWorkspaceManager))
#define MIDGARD_SQL_WORKSPACE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDGARD_TYPE_SQL_WORKSPACE_MANAGER, MidgardSQLWorkspaceManagerClass))
#define MIDGARD_IS_SQL_WORKSPACE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDGARD_TYPE_SQL_WORKSPACE_MANAGER))
#define MIDGARD_IS_SQL_WORKSPACE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDGARD_TYPE_SQL_WORKSPACE_MANAGER))
#define MIDGARD_SQL_WORKSPACE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDGARD_TYPE_SQL_WORKSPACE_MANAGER, MidgardSQLWorkspaceManagerClass))

typedef struct _MidgardSQLWorkspaceManager MidgardSQLWorkspaceManager;
typedef struct _MidgardSQLWorkspaceManagerClass MidgardSQLWorkspaceManagerClass;
typedef struct _MidgardSQLWorkspaceManagerPrivate MidgardSQLWorkspaceManagerPrivate;

struct _MidgardExecutableIface {
	GTypeInterface parent_iface;
	gboolean (*execute) (MidgardExecutable* self);
};

typedef enum  {
	MIDGARD_NAMESPACE_MANAGER_ERROR_URI_INVALID,
	MIDGARD_NAMESPACE_MANAGER_ERROR_URI_EXISTS,
	MIDGARD_NAMESPACE_MANAGER_ERROR_ALIAS_INVALID,
	MIDGARD_NAMESPACE_MANAGER_ERROR_ALIAS_EXISTS
} MidgardNamespaceManagerError;
#define MIDGARD_NAMESPACE_MANAGER_ERROR midgard_namespace_manager_error_quark ()
struct _MidgardNamespaceManagerIface {
	GTypeInterface parent_iface;
	gboolean (*create_uri) (MidgardNamespaceManager* self, const char* uri, const char* name, GError** error);
	char** (*list_names) (MidgardNamespaceManager* self, int* result_length1);
	char* (*get_uri_by_name) (MidgardNamespaceManager* self, const char* name);
	char* (*get_name_by_uri) (MidgardNamespaceManager* self, const char* uri);
	gboolean (*name_exists) (MidgardNamespaceManager* self);
	gboolean (*uri_exists) (MidgardNamespaceManager* self);
};

struct _MidgardProfilerIface {
	GTypeInterface parent_iface;
	void (*enable) (MidgardProfiler* self, gboolean toggle);
	void (*start) (MidgardProfiler* self);
	void (*end) (MidgardProfiler* self);
	gint (*get_time) (MidgardProfiler* self);
	char* (*get_execution_command) (MidgardProfiler* self);
};

struct _MidgardQueryConstraintSimpleIface {
	GTypeInterface parent_iface;
	MidgardQueryConstraintSimple** (*list_constraints) (MidgardQueryConstraintSimple* self, int* result_length1);
};

struct _MidgardQueryStorageIface {
	GTypeInterface parent_iface;
	const char* (*get_classname) (MidgardQueryStorage* self);
	void (*set_classname) (MidgardQueryStorage* self, const char* value);
};

struct _MidgardQueryValueHolderIface {
	GTypeInterface parent_iface;
	void (*get_value) (MidgardQueryValueHolder* self, GValue* result);
	void (*set_value) (MidgardQueryValueHolder* self, GValue* value);
};

struct _MidgardQueryConstraintIface {
	GTypeInterface parent_iface;
	MidgardQueryStorage* (*get_storage) (MidgardQueryConstraint* self);
	void (*set_storage) (MidgardQueryConstraint* self, MidgardQueryStorage* storage);
	MidgardQueryProperty* (*get_property) (MidgardQueryConstraint* self);
	void (*set_property) (MidgardQueryConstraint* self, MidgardQueryProperty* property);
	char* (*get_operator) (MidgardQueryConstraint* self);
	void (*set_operator) (MidgardQueryConstraint* self, const char* operator);
	MidgardQueryValueHolder* (*get_holder) (MidgardQueryConstraint* self);
	void (*set_holder) (MidgardQueryConstraint* self, MidgardQueryValueHolder* value);
	MidgardQueryProperty* (*get_property) (MidgardQueryConstraint* self);
	void (*set_property) (MidgardQueryConstraint* self, MidgardQueryProperty* value);
	MidgardQueryStorage* (*get_storage) (MidgardQueryConstraint* self);
	void (*set_storage) (MidgardQueryConstraint* self, MidgardQueryStorage* value);
	const char* (*get_operator) (MidgardQueryConstraint* self);
	void (*set_operator) (MidgardQueryConstraint* self, const char* value);
};

struct _MidgardQueryConstraintGroupIface {
	GTypeInterface parent_iface;
	char* (*get_group_type) (MidgardQueryConstraintGroup* self);
	void (*set_group_type) (MidgardQueryConstraintGroup* self, const char* name);
	void (*add_constraint) (MidgardQueryConstraintGroup* self, MidgardQueryConstraintSimple* constraint);
	const char* (*get_grouptype) (MidgardQueryConstraintGroup* self);
	void (*set_grouptype) (MidgardQueryConstraintGroup* self, const char* value);
};

struct _MidgardQueryValue {
	GObject parent_instance;
	MidgardQueryValuePrivate * priv;
};

struct _MidgardQueryValueClass {
	GObjectClass parent_class;
};

struct _MidgardQueryProperty {
	GObject parent_instance;
	MidgardQueryPropertyPrivate * priv;
};

struct _MidgardQueryPropertyClass {
	GObjectClass parent_class;
};

typedef enum  {
	MIDGARD_VALIDATION_ERROR_NAME_INVALID,
	MIDGARD_VALIDATION_ERROR_TYPE_INVALID,
	MIDGARD_VALIDATION_ERROR_VALUE_INVALID,
	MIDGARD_VALIDATION_ERROR_REFERENCE_INVALID,
	MIDGARD_VALIDATION_ERROR_PARENT_INVALID,
	MIDGARD_VALIDATION_ERROR_LOCATION_INVALID
} MidgardValidationError;
#define MIDGARD_VALIDATION_ERROR midgard_validation_error_quark ()
struct _MidgardQueryExecutorIface {
	GTypeInterface parent_iface;
	void (*set_constraint) (MidgardQueryExecutor* self, MidgardQueryConstraintSimple* constraint);
	void (*set_limit) (MidgardQueryExecutor* self, guint limit);
	void (*set_offset) (MidgardQueryExecutor* self, guint offset);
	void (*add_order) (MidgardQueryExecutor* self, MidgardQueryProperty* property, const char* type);
	guint (*get_results_count) (MidgardQueryExecutor* self);
	void (*validate) (MidgardQueryExecutor* self, GError** error);
};

struct _MidgardStorableIface {
	GTypeInterface parent_iface;
};

struct _MidgardQuerySelectIface {
	GTypeInterface parent_iface;
	void (*add_join) (MidgardQuerySelect* self, const char* type, MidgardQueryProperty* left_property, MidgardQueryProperty* right_property);
	MidgardStorable** (*list_objects) (MidgardQuerySelect* self, int* result_length1);
	void (*toggle_read_only) (MidgardQuerySelect* self, gboolean toggle);
};

struct _MidgardQueryDataIface {
	GTypeInterface parent_iface;
	void (*add_join) (MidgardQueryData* self, const char* type, MidgardQueryProperty* left_property, MidgardQueryProperty* right_property);
	void (*collect_property) (MidgardQueryData* self, MidgardQueryProperty* property, MidgardQueryStorage* storage);
	void (*list_data) (MidgardQueryData* self);
};

struct _MidgardModelIface {
	GTypeInterface parent_iface;
	MidgardModel* (*add_model) (MidgardModel* self, MidgardModel* model);
	MidgardModel* (*get_model_by_name) (MidgardModel* self, const char* name);
	MidgardModel** (*list_models) (MidgardModel* self, int* result_length1);
	MidgardModelReflector* (*get_reflector) (MidgardModel* self);
	MidgardModel* (*get_parent) (MidgardModel* self);
	void (*set_parent) (MidgardModel* self, MidgardModel* value);
	const char* (*get_namespace) (MidgardModel* self);
	void (*set_namespace) (MidgardModel* self, const char* value);
	const char* (*get_name) (MidgardModel* self);
	void (*set_name) (MidgardModel* self, const char* value);
};

struct _MidgardModelReflectorIface {
	GTypeInterface parent_iface;
	MidgardModel* (*get_model) (MidgardModelReflector* self);
	void (*set_model) (MidgardModelReflector* self, MidgardModel* value);
};

struct _MidgardModelPropertyReflectorIface {
	GTypeInterface parent_iface;
	char* (*get_typename) (MidgardModelPropertyReflector* self);
	GType (*get_gtype) (MidgardModelPropertyReflector* self);
	void (*get_default_value) (MidgardModelPropertyReflector* self, GValue* result);
	gboolean (*is_private) (MidgardModelPropertyReflector* self);
	char* (*get_description) (MidgardModelPropertyReflector* self);
};

struct _MidgardModelPropertyIface {
	GTypeInterface parent_iface;
	GType (*get_value_gtype) (MidgardModelProperty* self);
	void (*set_value_gtype) (MidgardModelProperty* self, GType value);
	const char* (*get_value_typename) (MidgardModelProperty* self);
	void (*set_value_typename) (MidgardModelProperty* self, const char* value);
	void (*get_value_default) (MidgardModelProperty* self, GValue* value);
	void (*set_value_default) (MidgardModelProperty* self, GValue* value);
	const char* (*get_description) (MidgardModelProperty* self);
	void (*set_description) (MidgardModelProperty* self, const char* value);
	gboolean (*get_is_private) (MidgardModelProperty* self);
	void (*set_is_private) (MidgardModelProperty* self, gboolean value);
};

struct _MidgardSchemaModel {
	GObject parent_instance;
	MidgardSchemaModelPrivate * priv;
};

struct _MidgardSchemaModelClass {
	GObjectClass parent_class;
};

struct _MidgardSchemaModelProperty {
	GObject parent_instance;
	MidgardSchemaModelPropertyPrivate * priv;
};

struct _MidgardSchemaModelPropertyClass {
	GObjectClass parent_class;
};

struct _MidgardSchemaBuilder {
	GObject parent_instance;
	MidgardSchemaBuilderPrivate * priv;
};

struct _MidgardSchemaBuilderClass {
	GObjectClass parent_class;
};

typedef enum  {
	MIDGARD_SCHEMA_BUILDER_ERROR_NAME_EXISTS
} MidgardSchemaBuilderError;
#define MIDGARD_SCHEMA_BUILDER_ERROR midgard_schema_builder_error_quark ()
typedef enum  {
	MIDGARD_STORAGE_MANAGER_ERROR_ACCESS_DENIED
} MidgardStorageManagerError;
#define MIDGARD_STORAGE_MANAGER_ERROR midgard_storage_manager_error_quark ()
struct _MidgardConfigIface {
	GTypeInterface parent_iface;
};

typedef enum  {
	MIDGARD_STORAGE_CONTENT_MANAGER_ERROR_OBJECT_INVALID,
	MIDGARD_STORAGE_CONTENT_MANAGER_ERROR_OBJECT_DUPLICATE,
	MIDGARD_STORAGE_CONTENT_MANAGER_ERROR_INTERNAL
} MidgardStorageContentManagerError;
#define MIDGARD_STORAGE_CONTENT_MANAGER_ERROR midgard_storage_content_manager_error_quark ()
struct _MidgardQueryManagerIface {
	GTypeInterface parent_iface;
};

struct _MidgardStorageContentManagerIface {
	GTypeInterface parent_iface;
	MidgardStorageManager* (*get_storage_manager) (MidgardStorageContentManager* self);
	gboolean (*exists) (MidgardStorageContentManager* self, MidgardStorable* object);
	gboolean (*create) (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
	gboolean (*update) (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
	gboolean (*save) (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
	gboolean (*remove) (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
	gboolean (*purge) (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
	MidgardQueryManager* (*get_query_manager) (MidgardStorageContentManager* self);
};

struct _MidgardStorageExecutorIface {
	GTypeInterface parent_iface;
	gboolean (*exists) (MidgardStorageExecutor* self);
	void (*prepare_create) (MidgardStorageExecutor* self, GError** error);
	void (*prepare_update) (MidgardStorageExecutor* self, GError** error);
	void (*prepare_save) (MidgardStorageExecutor* self, GError** error);
	void (*prepare_remove) (MidgardStorageExecutor* self, GError** error);
	void (*prepare_purge) (MidgardStorageExecutor* self, GError** error);
};

typedef enum  {
	MIDGARD_STORAGE_MODEL_ERROR_STORAGE_INVALID,
	MIDGARD_STORAGE_MODEL_ERROR_STORAGE_EXISTS,
	MIDGARD_STORAGE_MODEL_ERROR_INTERNAL
} MidgardStorageModelError;
#define MIDGARD_STORAGE_MODEL_ERROR midgard_storage_model_error_quark ()
struct _MidgardStorageModelIface {
	GTypeInterface parent_iface;
	gboolean (*location_set) (MidgardStorageModel* self, const char* location, GError** error);
	char* (*location_get) (MidgardStorageModel* self);
};

struct _MidgardStorageModelManagerIface {
	GTypeInterface parent_iface;
	MidgardStorageModel* (*create_storage_model) (MidgardStorageModelManager* self, MidgardSchemaModel* schema_model, const char* location);
	MidgardStorageModel** (*list_storage_models) (MidgardStorageModelManager* self, int* result_length1);
	MidgardStorageModel* (*get_model_by_name) (MidgardStorageModelManager* self, const char* name);
	MidgardSchemaModel** (*list_schema_models) (MidgardStorageModelManager* self, int* result_length1);
	MidgardSchemaModel* (*get_schema_model_by_name) (MidgardStorageModelManager* self, const char* name);
	MidgardNamespaceManager* (*get_namespace_manager) (MidgardStorageModelManager* self);
	MidgardStorageManager* (*get_storage_manager) (MidgardStorageModelManager* self);
};

struct _MidgardTransactionIface {
	GTypeInterface parent_iface;
	gboolean (*begin) (MidgardTransaction* self);
	gboolean (*rollback) (MidgardTransaction* self);
	gboolean (*get_status) (MidgardTransaction* self);
	char* (*get_name) (MidgardTransaction* self);
	const char* (*get_name) (MidgardTransaction* self);
	void (*set_name) (MidgardTransaction* self, const char* value);
};

struct _MidgardWorkspaceStorageIface {
	GTypeInterface parent_iface;
	const char* (*get_path) (MidgardWorkspaceStorage* self);
	void (*set_path) (MidgardWorkspaceStorage* self, const char* value);
};

struct _MidgardStorageWorkspaceManagerIface {
	GTypeInterface parent_iface;
	MidgardWorkspaceStorage* (*get_workspace) (MidgardStorageWorkspaceManager* self);
	void (*set_workspace) (MidgardStorageWorkspaceManager* self, MidgardWorkspaceStorage* value);
};

struct _MidgardStorageManagerIface {
	GTypeInterface parent_iface;
	gboolean (*open) (MidgardStorageManager* self, GError** error);
	gboolean (*close) (MidgardStorageManager* self, GError** error);
	MidgardStorageManager* (*fork) (MidgardStorageManager* self);
	MidgardStorageManager* (*clone) (MidgardStorageManager* self);
	const char* (*get_name) (MidgardStorageManager* self);
	void (*set_name) (MidgardStorageManager* self, const char* value);
	MidgardConfig* (*get_config) (MidgardStorageManager* self);
	void (*set_config) (MidgardStorageManager* self, MidgardConfig* value);
	MidgardStorageContentManager* (*get_content_manager) (MidgardStorageManager* self);
	MidgardStorageModelManager* (*get_model_manager) (MidgardStorageManager* self);
	MidgardProfiler* (*get_profiler) (MidgardStorageManager* self);
	MidgardTransaction* (*get_transaction) (MidgardStorageManager* self);
	MidgardStorageWorkspaceManager* (*get_workspace_manager) (MidgardStorageManager* self);
};

struct _MidgardTimestamp {
	GObject parent_instance;
	MidgardTimestampPrivate * priv;
};

struct _MidgardTimestampClass {
	GObjectClass parent_class;
};

struct _MidgardMetadata {
	GObject parent_instance;
	MidgardMetadataPrivate * priv;
};

struct _MidgardMetadataClass {
	GObjectClass parent_class;
	const char* (*get_parent) (MidgardMetadata* self);
	void (*set_parent) (MidgardMetadata* self, const char* value);
	guint (*get_action) (MidgardMetadata* self);
	MidgardTimestamp* (*get_created) (MidgardMetadata* self);
	MidgardTimestamp* (*get_revised) (MidgardMetadata* self);
};

struct _MidgardSchemaObject {
	GObject parent_instance;
	MidgardSchemaObjectPrivate * priv;
};

struct _MidgardSchemaObjectClass {
	GObjectClass parent_class;
	void (*set_property_value) (MidgardSchemaObject* self, const char* name, GValue* value);
	void (*get_property_value) (MidgardSchemaObject* self, const char* name, GValue* result);
	char** (*list_all_properties) (MidgardSchemaObject* self, int* result_length1);
};

struct _MidgardDBObject {
	GObject parent_instance;
	MidgardDBObjectPrivate * priv;
};

struct _MidgardDBObjectClass {
	GObjectClass parent_class;
};

struct _MidgardSQLStorageManager {
	GObject parent_instance;
	MidgardSQLStorageManagerPrivate * priv;
};

struct _MidgardSQLStorageManagerClass {
	GObjectClass parent_class;
};

struct _MidgardStorageManagerPoolIface {
	GTypeInterface parent_iface;
	void (*register_manager_type) (MidgardStorageManagerPool* self, const char* classname);
	MidgardStorageManager* (*create_manager) (MidgardStorageManagerPool* self, const char* classname, const char* name);
	char** (*list_managers) (MidgardStorageManagerPool* self, int* result_length1);
	MidgardStorageManager* (*get_manager_by_name) (MidgardStorageManagerPool* self, const char* name);
};

struct _MidgardStorageModelPropertyIface {
	GTypeInterface parent_iface;
	void (*set_primary) (MidgardStorageModelProperty* self, gboolean toggle);
	gboolean (*is_primary) (MidgardStorageModelProperty* self);
	void (*set_index) (MidgardStorageModelProperty* self, gboolean toggle);
	gboolean (*has_index) (MidgardStorageModelProperty* self);
	gboolean (*location_set) (MidgardStorageModelProperty* self, const char* location);
	char* (*location_get) (MidgardStorageModelProperty* self);
};

struct _MidgardWorkspaceContext {
	GObject parent_instance;
	MidgardWorkspaceContextPrivate * priv;
};

struct _MidgardWorkspaceContextClass {
	GObjectClass parent_class;
};

struct _MidgardWorkspace {
	GObject parent_instance;
	MidgardWorkspacePrivate * priv;
};

struct _MidgardWorkspaceClass {
	GObjectClass parent_class;
};

struct _MidgardSQLWorkspaceManager {
	MidgardSQLStorageManager parent_instance;
	MidgardSQLWorkspaceManagerPrivate * priv;
};

struct _MidgardSQLWorkspaceManagerClass {
	MidgardSQLStorageManagerClass parent_class;
};

typedef enum  {
	MIDGARD_WORKSPACE_STORAGE_ERROR_WORKSPACE_STORAGE_ERROR_NAME_EXISTS,
	MIDGARD_WORKSPACE_STORAGE_ERROR_WORKSPACE_STORAGE_ERROR_INVALID_PATH,
	MIDGARD_WORKSPACE_STORAGE_ERROR_WORKSPACE_STORAGE_ERROR_OBJECT_NOT_EXISTS,
	MIDGARD_WORKSPACE_STORAGE_ERROR_WORKSPACE_STORAGE_ERROR_CONTEXT_VIOLATION
} MidgardWorkspaceStorageError;
#define MIDGARD_WORKSPACE_STORAGE_ERROR midgard_workspace_storage_error_quark ()

GType midgard_executable_get_type (void);
gboolean midgard_executable_execute (MidgardExecutable* self);
GQuark midgard_namespace_manager_error_quark (void);
GType midgard_namespace_manager_get_type (void);
gboolean midgard_namespace_manager_create_uri (MidgardNamespaceManager* self, const char* uri, const char* name, GError** error);
char** midgard_namespace_manager_list_names (MidgardNamespaceManager* self, int* result_length1);
char* midgard_namespace_manager_get_uri_by_name (MidgardNamespaceManager* self, const char* name);
char* midgard_namespace_manager_get_name_by_uri (MidgardNamespaceManager* self, const char* uri);
gboolean midgard_namespace_manager_name_exists (MidgardNamespaceManager* self);
gboolean midgard_namespace_manager_uri_exists (MidgardNamespaceManager* self);
GType midgard_profiler_get_type (void);
void midgard_profiler_enable (MidgardProfiler* self, gboolean toggle);
void midgard_profiler_start (MidgardProfiler* self);
void midgard_profiler_end (MidgardProfiler* self);
gint midgard_profiler_get_time (MidgardProfiler* self);
char* midgard_profiler_get_execution_command (MidgardProfiler* self);
GType midgard_query_constraint_simple_get_type (void);
MidgardQueryConstraintSimple** midgard_query_constraint_simple_list_constraints (MidgardQueryConstraintSimple* self, int* result_length1);
GType midgard_query_storage_get_type (void);
const char* midgard_query_storage_get_classname (MidgardQueryStorage* self);
void midgard_query_storage_set_classname (MidgardQueryStorage* self, const char* value);
GType midgard_query_property_get_type (void);
GType midgard_query_value_holder_get_type (void);
GType midgard_query_constraint_get_type (void);
MidgardQueryStorage* midgard_query_constraint_get_storage (MidgardQueryConstraint* self);
void midgard_query_constraint_set_storage (MidgardQueryConstraint* self, MidgardQueryStorage* storage);
MidgardQueryProperty* midgard_query_constraint_get_property (MidgardQueryConstraint* self);
void midgard_query_constraint_set_property (MidgardQueryConstraint* self, MidgardQueryProperty* property);
char* midgard_query_constraint_get_operator (MidgardQueryConstraint* self);
void midgard_query_constraint_set_operator (MidgardQueryConstraint* self, const char* operator);
MidgardQueryValueHolder* midgard_query_constraint_get_holder (MidgardQueryConstraint* self);
void midgard_query_constraint_set_holder (MidgardQueryConstraint* self, MidgardQueryValueHolder* value);
GType midgard_query_constraint_group_get_type (void);
char* midgard_query_constraint_group_get_group_type (MidgardQueryConstraintGroup* self);
void midgard_query_constraint_group_set_group_type (MidgardQueryConstraintGroup* self, const char* name);
void midgard_query_constraint_group_add_constraint (MidgardQueryConstraintGroup* self, MidgardQueryConstraintSimple* constraint);
const char* midgard_query_constraint_group_get_grouptype (MidgardQueryConstraintGroup* self);
void midgard_query_constraint_group_set_grouptype (MidgardQueryConstraintGroup* self, const char* value);
void midgard_query_value_holder_get_value (MidgardQueryValueHolder* self, GValue* result);
void midgard_query_value_holder_set_value (MidgardQueryValueHolder* self, GValue* value);
GType midgard_query_value_get_type (void);
MidgardQueryValue* midgard_query_value_new (void);
MidgardQueryValue* midgard_query_value_construct (GType object_type);
MidgardQueryProperty* midgard_query_property_new (void);
MidgardQueryProperty* midgard_query_property_construct (GType object_type);
GQuark midgard_validation_error_quark (void);
GType midgard_query_executor_get_type (void);
void midgard_query_executor_set_constraint (MidgardQueryExecutor* self, MidgardQueryConstraintSimple* constraint);
void midgard_query_executor_set_limit (MidgardQueryExecutor* self, guint limit);
void midgard_query_executor_set_offset (MidgardQueryExecutor* self, guint offset);
void midgard_query_executor_add_order (MidgardQueryExecutor* self, MidgardQueryProperty* property, const char* type);
guint midgard_query_executor_get_results_count (MidgardQueryExecutor* self);
void midgard_query_executor_validate (MidgardQueryExecutor* self, GError** error);
GType midgard_storable_get_type (void);
GType midgard_query_select_get_type (void);
void midgard_query_select_add_join (MidgardQuerySelect* self, const char* type, MidgardQueryProperty* left_property, MidgardQueryProperty* right_property);
MidgardStorable** midgard_query_select_list_objects (MidgardQuerySelect* self, int* result_length1);
void midgard_query_select_toggle_read_only (MidgardQuerySelect* self, gboolean toggle);
GType midgard_query_data_get_type (void);
void midgard_query_data_add_join (MidgardQueryData* self, const char* type, MidgardQueryProperty* left_property, MidgardQueryProperty* right_property);
void midgard_query_data_collect_property (MidgardQueryData* self, MidgardQueryProperty* property, MidgardQueryStorage* storage);
void midgard_query_data_list_data (MidgardQueryData* self);
GType midgard_model_get_type (void);
GType midgard_model_reflector_get_type (void);
MidgardModel* midgard_model_reflector_get_model (MidgardModelReflector* self);
GType midgard_model_property_reflector_get_type (void);
char* midgard_model_property_reflector_get_typename (MidgardModelPropertyReflector* self);
GType midgard_model_property_reflector_get_gtype (MidgardModelPropertyReflector* self);
void midgard_model_property_reflector_get_default_value (MidgardModelPropertyReflector* self, GValue* result);
gboolean midgard_model_property_reflector_is_private (MidgardModelPropertyReflector* self);
char* midgard_model_property_reflector_get_description (MidgardModelPropertyReflector* self);
MidgardModel* midgard_model_add_model (MidgardModel* self, MidgardModel* model);
MidgardModel* midgard_model_get_model_by_name (MidgardModel* self, const char* name);
MidgardModel** midgard_model_list_models (MidgardModel* self, int* result_length1);
MidgardModelReflector* midgard_model_get_reflector (MidgardModel* self);
MidgardModel* midgard_model_get_parent (MidgardModel* self);
void midgard_model_set_parent (MidgardModel* self, MidgardModel* value);
const char* midgard_model_get_namespace (MidgardModel* self);
void midgard_model_set_namespace (MidgardModel* self, const char* value);
const char* midgard_model_get_name (MidgardModel* self);
void midgard_model_set_name (MidgardModel* self, const char* value);
GType midgard_model_property_get_type (void);
GType midgard_model_property_get_value_gtype (MidgardModelProperty* self);
void midgard_model_property_set_value_gtype (MidgardModelProperty* self, GType value);
const char* midgard_model_property_get_value_typename (MidgardModelProperty* self);
void midgard_model_property_set_value_typename (MidgardModelProperty* self, const char* value);
void midgard_model_property_get_value_default (MidgardModelProperty* self, GValue* result);
void midgard_model_property_set_value_default (MidgardModelProperty* self, GValue* value);
const char* midgard_model_property_get_description (MidgardModelProperty* self);
void midgard_model_property_set_description (MidgardModelProperty* self, const char* value);
gboolean midgard_model_property_get_is_private (MidgardModelProperty* self);
void midgard_model_property_set_is_private (MidgardModelProperty* self, gboolean value);
GType midgard_schema_model_get_type (void);
char* midgard_schema_model_get_name (MidgardSchemaModel* self);
MidgardModel* midgard_schema_model_add_parent_model (MidgardSchemaModel* self, MidgardModel* model);
MidgardModel* midgard_schema_model_get_parent_model (MidgardSchemaModel* self);
gboolean midgard_schema_model_is_valid (MidgardSchemaModel* self);
MidgardSchemaModel* midgard_schema_model_new (void);
MidgardSchemaModel* midgard_schema_model_construct (GType object_type);
GType midgard_schema_model_property_get_type (void);
char* midgard_schema_model_property_get_name (MidgardSchemaModelProperty* self);
MidgardModel* midgard_schema_model_property_add_parent_model (MidgardSchemaModelProperty* self, MidgardModel* model);
MidgardModel* midgard_schema_model_property_get_parent_model (MidgardSchemaModelProperty* self);
gboolean midgard_schema_model_property_is_valid (MidgardSchemaModelProperty* self);
void midgard_schema_model_property_set_value_typename (MidgardSchemaModelProperty* self, const char* name);
void midgard_schema_model_property_set_value_gtype (MidgardSchemaModelProperty* self, GType type);
void midgard_schema_model_property_set_value_default (MidgardSchemaModelProperty* self, GValue* value);
void midgard_schema_model_property_set_private (MidgardSchemaModelProperty* self, gboolean toggle);
void midgard_schema_model_property_set_description (MidgardSchemaModelProperty* self, const char* description);
gboolean midgard_schema_model_property_set_namespace (MidgardSchemaModelProperty* self, const char* name);
char* midgard_schema_model_property_get_namespace (MidgardSchemaModelProperty* self);
MidgardSchemaModelProperty* midgard_schema_model_property_new (void);
MidgardSchemaModelProperty* midgard_schema_model_property_construct (GType object_type);
GType midgard_schema_builder_get_type (void);
GQuark midgard_schema_builder_error_quark (void);
void midgard_schema_builder_register_model (MidgardSchemaBuilder* self, MidgardSchemaModel* model, GError** error);
GQuark midgard_storage_manager_error_quark (void);
GType midgard_config_get_type (void);
GQuark midgard_storage_content_manager_error_quark (void);
GType midgard_query_manager_get_type (void);
GType midgard_storage_content_manager_get_type (void);
GType midgard_storage_executor_get_type (void);
GQuark midgard_storage_model_error_quark (void);
GType midgard_storage_model_get_type (void);
GType midgard_storage_model_manager_get_type (void);
GType midgard_transaction_get_type (void);
GType midgard_workspace_storage_get_type (void);
GType midgard_storage_workspace_manager_get_type (void);
GType midgard_storage_manager_get_type (void);
void midgard_schema_builder_register_storage_models (MidgardSchemaBuilder* self, MidgardStorageManager* manager, GError** error);
MidgardStorable* midgard_schema_builder_factory (MidgardSchemaBuilder* self, MidgardStorageManager* storage, const char* classname, GError** error);
MidgardSchemaModel* midgard_schema_builder_get_schema_model (MidgardSchemaBuilder* self, const char* classname);
MidgardSchemaBuilder* midgard_schema_builder_new (void);
MidgardSchemaBuilder* midgard_schema_builder_construct (GType object_type);
GType midgard_timestamp_get_type (void);
MidgardTimestamp* midgard_timestamp_construct (GType object_type);
GType midgard_metadata_get_type (void);
MidgardMetadata* midgard_metadata_construct (GType object_type);
const char* midgard_metadata_get_parent (MidgardMetadata* self);
guint midgard_metadata_get_action (MidgardMetadata* self);
MidgardTimestamp* midgard_metadata_get_created (MidgardMetadata* self);
MidgardTimestamp* midgard_metadata_get_revised (MidgardMetadata* self);
GType midgard_schema_object_get_type (void);
void midgard_schema_object_set_property_value (MidgardSchemaObject* self, const char* name, GValue* value);
void midgard_schema_object_get_property_value (MidgardSchemaObject* self, const char* name, GValue* result);
char** midgard_schema_object_list_all_properties (MidgardSchemaObject* self, int* result_length1);
MidgardSchemaObject* midgard_schema_object_construct (GType object_type);
const char* midgard_schema_object_get_guid (MidgardSchemaObject* self);
guint midgard_schema_object_get_id (MidgardSchemaObject* self);
MidgardMetadata* midgard_schema_object_get_metadata (MidgardSchemaObject* self);
GType midgard_db_object_get_type (void);
MidgardDBObject* midgard_db_object_construct (GType object_type);
GType midgard_sql_storage_manager_get_type (void);
MidgardSQLStorageManager* midgard_sql_storage_manager_new (void);
MidgardSQLStorageManager* midgard_sql_storage_manager_construct (GType object_type);
gboolean midgard_transaction_begin (MidgardTransaction* self);
gboolean midgard_transaction_rollback (MidgardTransaction* self);
gboolean midgard_transaction_get_status (MidgardTransaction* self);
char* midgard_transaction_get_name (MidgardTransaction* self);
GType midgard_storage_manager_pool_get_type (void);
void midgard_storage_manager_pool_register_manager_type (MidgardStorageManagerPool* self, const char* classname);
MidgardStorageManager* midgard_storage_manager_pool_create_manager (MidgardStorageManagerPool* self, const char* classname, const char* name);
char** midgard_storage_manager_pool_list_managers (MidgardStorageManagerPool* self, int* result_length1);
MidgardStorageManager* midgard_storage_manager_pool_get_manager_by_name (MidgardStorageManagerPool* self, const char* name);
gboolean midgard_storage_manager_open (MidgardStorageManager* self, GError** error);
gboolean midgard_storage_manager_close (MidgardStorageManager* self, GError** error);
MidgardStorageManager* midgard_storage_manager_fork (MidgardStorageManager* self);
MidgardStorageManager* midgard_storage_manager_clone (MidgardStorageManager* self);
const char* midgard_storage_manager_get_name (MidgardStorageManager* self);
MidgardConfig* midgard_storage_manager_get_config (MidgardStorageManager* self);
MidgardStorageContentManager* midgard_storage_manager_get_content_manager (MidgardStorageManager* self);
MidgardStorageModelManager* midgard_storage_manager_get_model_manager (MidgardStorageManager* self);
MidgardProfiler* midgard_storage_manager_get_profiler (MidgardStorageManager* self);
MidgardTransaction* midgard_storage_manager_get_transaction (MidgardStorageManager* self);
MidgardStorageWorkspaceManager* midgard_storage_manager_get_workspace_manager (MidgardStorageManager* self);
MidgardWorkspaceStorage* midgard_storage_workspace_manager_get_workspace (MidgardStorageWorkspaceManager* self);
void midgard_storage_workspace_manager_set_workspace (MidgardStorageWorkspaceManager* self, MidgardWorkspaceStorage* value);
gboolean midgard_storage_executor_exists (MidgardStorageExecutor* self);
void midgard_storage_executor_prepare_create (MidgardStorageExecutor* self, GError** error);
void midgard_storage_executor_prepare_update (MidgardStorageExecutor* self, GError** error);
void midgard_storage_executor_prepare_save (MidgardStorageExecutor* self, GError** error);
void midgard_storage_executor_prepare_remove (MidgardStorageExecutor* self, GError** error);
void midgard_storage_executor_prepare_purge (MidgardStorageExecutor* self, GError** error);
MidgardStorageModel* midgard_storage_model_manager_create_storage_model (MidgardStorageModelManager* self, MidgardSchemaModel* schema_model, const char* location);
MidgardStorageModel** midgard_storage_model_manager_list_storage_models (MidgardStorageModelManager* self, int* result_length1);
MidgardStorageModel* midgard_storage_model_manager_get_model_by_name (MidgardStorageModelManager* self, const char* name);
MidgardSchemaModel** midgard_storage_model_manager_list_schema_models (MidgardStorageModelManager* self, int* result_length1);
MidgardSchemaModel* midgard_storage_model_manager_get_schema_model_by_name (MidgardStorageModelManager* self, const char* name);
MidgardNamespaceManager* midgard_storage_model_manager_get_namespace_manager (MidgardStorageModelManager* self);
MidgardStorageManager* midgard_storage_model_manager_get_storage_manager (MidgardStorageModelManager* self);
MidgardStorageManager* midgard_storage_content_manager_get_storage_manager (MidgardStorageContentManager* self);
gboolean midgard_storage_content_manager_exists (MidgardStorageContentManager* self, MidgardStorable* object);
gboolean midgard_storage_content_manager_create (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
gboolean midgard_storage_content_manager_update (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
gboolean midgard_storage_content_manager_save (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
gboolean midgard_storage_content_manager_remove (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
gboolean midgard_storage_content_manager_purge (MidgardStorageContentManager* self, MidgardStorable* object, GError** error);
MidgardQueryManager* midgard_storage_content_manager_get_query_manager (MidgardStorageContentManager* self);
GType midgard_storage_model_property_get_type (void);
void midgard_storage_model_property_set_primary (MidgardStorageModelProperty* self, gboolean toggle);
gboolean midgard_storage_model_property_is_primary (MidgardStorageModelProperty* self);
void midgard_storage_model_property_set_index (MidgardStorageModelProperty* self, gboolean toggle);
gboolean midgard_storage_model_property_has_index (MidgardStorageModelProperty* self);
gboolean midgard_storage_model_property_location_set (MidgardStorageModelProperty* self, const char* location);
char* midgard_storage_model_property_location_get (MidgardStorageModelProperty* self);
gboolean midgard_storage_model_location_set (MidgardStorageModel* self, const char* location, GError** error);
char* midgard_storage_model_location_get (MidgardStorageModel* self);
const char* midgard_workspace_storage_get_path (MidgardWorkspaceStorage* self);
GType midgard_workspace_context_get_type (void);
char** midgard_workspace_context_get_workspace_names (MidgardWorkspaceContext* self, int* result_length1);
GType midgard_workspace_get_type (void);
MidgardWorkspace* midgard_workspace_context_get_workspace_by_name (MidgardWorkspaceContext* self);
gboolean midgard_workspace_context_has_workspace (MidgardWorkspaceContext* self, MidgardWorkspace* workspace);
MidgardWorkspaceContext* midgard_workspace_context_new (void);
MidgardWorkspaceContext* midgard_workspace_context_construct (GType object_type);
MidgardWorkspace** midgard_workspace_list_children (MidgardWorkspace* self, int* result_length1);
MidgardWorkspace* midgard_workspace_get_by_path (MidgardWorkspace* self);
MidgardWorkspace* midgard_workspace_new (void);
MidgardWorkspace* midgard_workspace_construct (GType object_type);
MidgardWorkspace* midgard_workspace_get_parent (MidgardWorkspace* self);
void midgard_workspace_set_parent (MidgardWorkspace* self, MidgardWorkspace* value);
MidgardWorkspaceContext* midgard_workspace_get_context (MidgardWorkspace* self);
GType midgard_sql_workspace_manager_get_type (void);
GQuark midgard_workspace_storage_error_quark (void);
gboolean midgard_sql_workspace_manager_workspace_create (MidgardSQLWorkspaceManager* self, MidgardWorkspaceStorage* workspace, GError** error);
gboolean midgard_sql_workspace_manager_workspace_exists (MidgardSQLWorkspaceManager* self, MidgardWorkspaceStorage* workspace, GError** error);
MidgardSQLWorkspaceManager* midgard_sql_workspace_manager_new (void);
MidgardSQLWorkspaceManager* midgard_sql_workspace_manager_construct (GType object_type);


G_END_DECLS

#endif
